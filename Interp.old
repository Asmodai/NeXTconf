/*
 * Interp.m  --- Some title
 *
 * Copyright (c) 2017 Paul Ward <asmodai@gmail.com>
 *
 * Author:     Paul Ward <asmodai@gmail.com>
 * Maintainer: Paul Ward <asmodai@gmail.com>
 * Created:    Wed,  1 Feb 2017 13:35:41 +0000 (GMT)
 * Keywords:   
 * URL:        Not distributed yet.
 */

/* {{{ License: */
/*
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */
/* }}} */

/* {{{ Commentary: */
/*
 *
 */
/* }}} */

#import <stdio.h>
#import <stdlib.h>
#import <unistd.h>

#import "Selector.h"
#import "Symbol.h"
#import "SyntaxTree.h"

extern const char *node_types[];
extern const char *return_types[];
extern const int   children_per_node[];

static
void
doAssign(Symbol *lhs, Symbol *rhs)
{
  [lhs setData:rhs];
}

static
id
resolveSymbol(Symbol *symb)
{
  id result = [symb data];;

  switch ([symb type]) {
    case SymbolSelector:
      {
        Selector *sel = (Selector *)result;
        result = [sel evaluate];
      }
      break;

    default:
      break;
  }

  return result;
}

static
BOOL
isEqual(Symbol *lhs, Symbol *rhs)
{
  id lhsData = resolveSymbol(lhs);
  id rhsData = resolveSymbol(rhs);

  return [lhsData isEqual:rhsData];
}

static
void
doPrint(Symbol *symb)
{
  printf("%s", [[symb data] stringValue]);
}

static
id
dointerp(SyntaxTree *node)
{
  size_t     i        = 0;
  STNodeType ntype    = [node nodeType];
  size_t     children = children_per_node[ntype];

  switch (ntype) {
    case EmptyStmt:
      break;

    case StmtList:
      {
        for (i = 0; i < children; i++) {
          dointerp([node childAtIndex:i]);
        }
      }
      break;

    case PrintStmt:
      {
        doPrint(dointerp([node childAtIndex:0]));
      }
      break;

    case IfThenElseStmt:
    case IfThenStmt:
      {
        BOOL res = (BOOL)dointerp([node childAtIndex:0]);

        if (res) {
          dointerp([node childAtIndex:1]);
          return nil;
        }

        if (ntype == IfThenElseStmt) {
          dointerp([node childAtIndex:2]);
        }
      }
      break;

    case ExprStmt:
      {
        dointerp([node childAtIndex:0]);
      }
      break;
      
    case EqualExpr:
      {
        return (BOOL)isEqual([[node childAtIndex:0] symbol],
                             [[node childAtIndex:1] symbol]);
      }
      break;

    case AssignExpr:
      doAssign([node symbol], [[node childAtIndex:0] symbol]);
      break;

    case ConcatExpr:
      {
      }
      break;

    case IdentExpr:
    case IntegerExpr:
    case StringExpr:
      return [node symbol];
      break;

    default:
      break;
  }

  return nil;
}

void
interpret(SyntaxTree *root)
{
  dointerp(root);
}

/* Interp.m ends here */
